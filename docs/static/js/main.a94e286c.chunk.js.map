{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,sBACNC,SAAU,eAyBCE,EAbO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC5BdU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,SAC/C,8BAKRD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCRTG,E,4MACFC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAEd,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,sCAM7C,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAChC,uCAAaqB,KAAKX,MAAMC,eAG9BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAChC,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGnC,kBAAC,EAAD,CAASO,QAAQ,uC,+BAKxB,OACI,yBAAKF,UAAU,cACVgB,KAAKC,qB,GA3BJC,IAAMC,WAoCtBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.a94e286c.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\r\nimport React from \"react\";\r\n\r\nconst seasonConfig = {\r\n  summer: {\r\n    text: \"Let's hit the beach!\",\r\n    iconName: \"sun\"\r\n  },\r\n  winter: {\r\n    text: \"Burr, it is chilly!\",\r\n    iconName: \"snowflake\"\r\n  }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    if (month > 2 && month < 9) {\r\n        return lat > 0 ? \"summer\" : \"winter\";\r\n    } else {\r\n        return lat > 0 ? \"winter\" : \"summer\";\r\n    }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season];\r\n\r\n    return (\r\n      <div className={`season-display ${season}`}>\r\n        <i className={`icon-left massive ${iconName} icon`} />\r\n        <h1>{text}</h1>\r\n        <i className={`icon-right massive ${iconName} icon`} />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default SeasonDisplay;","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        <p></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message: \"Loading...\"\r\n};\r\n\r\nexport default Spinner;","// Import the React and ReactDOM libraries\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\n// Create a react class component\r\nclass App extends React.Component {\r\n    state = { lat: null, errorMessage: \"\" };\r\n\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => this.setState({ lat: position.coords.latitude }),\r\n            err => this.setState({ errorMessage: err.message })\r\n        );\r\n    }\r\n\r\n\r\n    renderContent() {\r\n        if (this.state.errorMessage && !this.state.lat) {\r\n            return <div>Error: {this.state.errorMessage}</div>\r\n        }\r\n        \r\n        if (!this.state.errorMessage && this.state.lat) {\r\n            return <SeasonDisplay lat={this.state.lat} />\r\n        }\r\n        \r\n        return <Spinner message=\"Please allow location in browser\" />;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"border red\">\r\n                {this.renderContent()}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n  }\r\n  \r\n  \r\n  // Take the react component and show it on the screen\r\n  ReactDOM.render(<App />, document.querySelector(\"#root\"));"],"sourceRoot":""}